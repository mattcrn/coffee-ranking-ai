# Nuxt 4 Testing Setup Rules

## Testing Infrastructure
- This project uses `@nuxt/test-utils/playwright` for end-to-end testing following Nuxt 4 documentation
- Test files are located in `tests/` directory with `.test.ts` extension
- Test files should be named after the feature/page being tested (e.g., `nuxt-ui-example.test.ts`)

## Feature Development Workflow (TDD Approach)

### 1. ALWAYS Create Tests First
For every new feature, page, or component:
- **FIRST**: Create comprehensive end-to-end tests in `tests/[feature-name].test.ts`
- **THEN**: Implement the feature until all tests pass
- **EXCEPTION**: Only skip testing if explicitly told "do not create tests"

### 2. Test File Naming Convention
- Use descriptive names: `[feature-name].test.ts`
- Examples: `login.test.ts`, `dashboard.test.ts`, `user-profile.test.ts`
- Match the feature/page being tested

### 3. Test Structure Requirements
```typescript
import { expect, test } from '@nuxt/test-utils/playwright'

test('[feature-name] page displays core functionality', async ({ page, goto }) => {
  await goto('/[feature-path]', { waitUntil: 'hydration' })
  // Test core UI elements and functionality
})

test('[feature-name] handles user interactions', async ({ page, goto }) => {
  await goto('/[feature-path]', { waitUntil: 'hydration' })
  // Test key user interactions and state changes
})
```

### 4. Test Coverage Guidelines
**INCLUDE** in tests:
- ✅ Page title and main headings
- ✅ Core UI components (buttons, forms, inputs)
- ✅ Primary user interactions
- ✅ Key functionality and state changes
- ✅ Form submissions and data handling
- ✅ Navigation and routing
- ✅ Responsive design (desktop, tablet, mobile)

**AVOID** over-testing:
- ❌ Don't test every minor UI element
- ❌ Don't test obvious browser behavior
- ❌ Don't test third-party library functionality
- ❌ Don't create tests for static content only
- ❌ Don't test implementation details

### 5. Test Quality Standards
- Use descriptive test names that explain what is being tested
- Test the "happy path" and critical user flows
- Focus on user experience and business logic
- Keep tests maintainable and readable
- Use proper assertions with clear error messages

### 6. Implementation Guidelines
- Write tests that define the expected behavior
- Implement features to make tests pass
- Refactor code while keeping tests green
- Ensure tests are fast and reliable

### 7. Test Commands
- Run tests: `npm run test`
- Run specific test: `npx playwright test tests/[feature-name].test.ts`
- Run tests with UI: `npx playwright test --ui`

### 8. Example Test Template
```typescript
import { expect, test } from '@nuxt/test-utils/playwright'

test('[feature-name] displays core functionality', async ({ page, goto }) => {
  await goto('/[feature-path]', { waitUntil: 'hydration' })
  
  // Test main page elements
  await expect(page.getByRole('heading', { name: '[Expected Title]' })).toBeVisible()
  
  // Test core components
  await expect(page.getByRole('button', { name: '[Button Text]' })).toBeVisible()
  
  // Test key functionality
  const input = page.getByPlaceholder('[Placeholder Text]')
  await input.fill('[Test Data]')
  await expect(page.getByText('[Expected Result]')).toBeVisible()
})

test('[feature-name] handles user interactions', async ({ page, goto }) => {
  await goto('/[feature-path]', { waitUntil: 'hydration' })
  
  // Test user interactions
  const button = page.getByRole('button', { name: '[Button Text]' })
  await button.click()
  
  // Verify expected behavior
  await expect(page.getByText('[Expected Result]')).toBeVisible()
})
```

## Development Process
1. **Analyze** the feature requirements
2. **Create** test file with core functionality tests
3. **Implement** the feature incrementally
4. **Run** tests frequently to ensure they pass
5. **Refactor** code while maintaining test coverage

## Quality Assurance
- Tests must pass before considering feature complete
- Tests should be meaningful and test real user scenarios
- Avoid testing implementation details, focus on behavior
- Keep tests simple and maintainable

Remember: **Tests First, Code Second** - This ensures we build features that actually work as expected and provides a safety net for future changes.
description:
globs:
alwaysApply: false
---
